pipeline {
    agent any

    environment {
        DOCKER_HUB_CREDENTIALS = credentials('docker-hub-credentials')
        DOCKER_IMAGE_NAME = 'kemlee95/workflow'
        DOCKER_IMAGE_TAG = "${env.BUILD_NUMBER}"
        RUNNER_NODE = '192.168.226.132'
    }
    stages {
        stage('Run Test') {
            agent {
                label "${RUNNER_NODE}"
            }
            steps {
                sh 'echo "Running Go tests in Docker environment..."'
                sh "docker build -t kemlee95/workflow:test -f Dockerfile.ci ."
                sh 'export DB_USER=sos_user'
                sh 'export DB_PASSWORD=password'
                sh 'export DB_NAME=sos_db'
                sh 'export DB_HOST=database.local.work'
                sh 'export DB_PORT=5432'
                sh "docker run --rm kemlee95/workflow:test"
                sh "docker rmi kemlee95/workflow:test"
            }
        }

        stage('Docker Build') {
            agent {
                label "${RUNNER_NODE}"
            }
            steps {
                sh 'echo "Building Docker image for Go app..."'
                sh "docker build -t ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} -f Dockerfile ."
                sh "docker tag ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} ${DOCKER_IMAGE_NAME}:latest"
            }
        }

        stage('Docker Push') {
            agent {
                label "${RUNNER_NODE}"
            }
            steps {
                sh 'echo "Pushing Docker image to Docker Hub..."'
                sh 'echo $DOCKER_HUB_CREDENTIALS_PSW | docker login -u $DOCKER_HUB_CREDENTIALS_USR --password-stdin'
                sh "docker push ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}"
                sh "docker push ${DOCKER_IMAGE_NAME}:latest"
                sh 'docker logout'
            }
        }

        stage('Cleanup') {
            agent {
                label "${RUNNER_NODE}"
            }
            steps {
                sh 'echo "Removing Docker images..."'
                sh "docker rmi ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}"
                sh "docker rmi ${DOCKER_IMAGE_NAME}:latest"
                sh 'docker system prune -f'
            }
        }
    }
}
