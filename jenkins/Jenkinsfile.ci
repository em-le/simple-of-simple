pipeline {
    agent any

    parameters {
        string(name: 'RUNNER_LABEL', defaultValue: 'runner', description: 'Runner label')
    }

    environment {
        DOCKER_IMAGE_NAME = 'kemlee95/workflow'
        DOCKER_IMAGE_TAG = "${env.BUILD_NUMBER}"
        DB_USER = 'postgres'
        DB_PASSWORD = 'password'
        DB_NAME = 'test-workflow'
        DB_HOST = 'database.local.work'
        DB_PORT = '5432'
    }
    stages {
        stage('Run Test') {
            agent {
                label "${params.RUNNER_LABEL}"
            }
            steps {
                sh 'echo "Running Go tests in Docker environment..."'
                script {
                    try {
                        sh "docker build -t ${DOCKER_IMAGE_NAME}:test -f ./src/Dockerfile.ci ./src"
                        sh """
                            docker run --rm \\
                            -e DB_USER=${DB_USER} \\
                            -e DB_PASSWORD=${DB_PASSWORD} \\
                            -e DB_NAME=${DB_NAME} \\
                            -e DB_HOST=${DB_HOST} \\
                            -e DB_PORT=${DB_PORT} \\
                            ${DOCKER_IMAGE_NAME}:test
                        """
                    } finally {
                        sh "docker rmi ${DOCKER_IMAGE_NAME}:test || true"
                    }
                }
            }
        }

        stage('Docker Build') {
            agent {
                label "${params.RUNNER_LABEL}"
            }
            steps {
                sh 'echo "Building Docker image for Go app..."'
                sh "docker build -t ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} -f ./src/Dockerfile.ci ./src"
                sh "docker tag ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} ${DOCKER_IMAGE_NAME}:latest"
            }
        }

        stage('Docker Push') {
            agent {
                label "${params.RUNNER_LABEL}"
            }
            steps {
                sh 'echo "Pushing Docker image to Docker Hub..."'
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'
                    script {
                        def branchMap = [
                            development: 'development',
                            main: 'latest'
                        ]
                        def dockerTag = branchMap[env.BRANCH_NAME] ?: 'latest'
                        def dockerImage = "${DOCKER_IMAGE_NAME}:${dockerTag}"
                        sh "docker push ${dockerImage}"
                    }
                    sh 'docker logout'
                }
            }
        }
    }

    post {
        always {
            echo "Removing Docker images..."
            sh 'docker system prune -f || true'
        }
        success {
            updateGitlabCommitStatus name: 'build', state: 'success'
        }
        failure {
            updateGitlabCommitStatus name: 'build', state: 'failed'
        }
    }
}
