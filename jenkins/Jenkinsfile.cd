pipeline {
    agent any

    parameters {
        string(name: 'DEPLOY_TARGET', defaultValue: '', description: 'Deployment target server')
    }

    environment {
        DOCKER_IMAGE_NAME = 'kemlee95/workflow'
        DB_USER = 'postgres'
        DB_PASSWORD = 'password'
        DB_NAME = 'workflow'
        DB_HOST = 'database.local.work'
        DB_PORT = '5432'
    }
    stages {
        stage('Deploy') {
            agent {
                label "${params.DEPLOY_TARGET}"
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'
                    script {
                        def dockerTag = getDockerTag(params.DEPLOY_TARGET)
                        def dockerImage = "${DOCKER_IMAGE_NAME}:${dockerTag}"
                        try {
                            sh "docker pull ${dockerImage}"
                            sh "docker rm -f workflow || true"
                            sh """
                                docker run -d --name workflow \\
                                -e DB_USER=${DB_USER} \\
                                -e DB_PASSWORD=${DB_PASSWORD} \\
                                -e DB_NAME=${DB_NAME} \\
                                -e DB_HOST=${DB_HOST} \\
                                -e DB_PORT=${DB_PORT} \\
                                -v /etc/hosts:/etc/hosts:ro \\
                                -p 8080:8080 \\
                                ${dockerImage}
                            """
                        } catch (Exception e) {
                            error "Failed to deploy: ${e.message}"
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            echo "Deploy Complete"
        }
        success {
            echo "Deployment successful"
        }
        failure {
            echo "Deployment failed"
        }
    }
}

def getDockerTag(target) {
    def targetMap = [
        dev: 'development',
        prod: 'latest'
    ]
    return targetMap[target] ?: 'latest'
}
